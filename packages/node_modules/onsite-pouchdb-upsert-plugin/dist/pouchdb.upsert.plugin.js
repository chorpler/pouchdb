(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.PouchUpsertPlugin = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1) {
        throw t[1];
      }

      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) {
      throw new TypeError("Generator is already executing.");
    }

    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) {
          return t;
        }

        if (y = 0, t) {
          op = [op[0] & 2, t.value];
        }

        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;

          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };

          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;

          case 7:
            op = _.ops.pop();

            _.trys.pop();

            continue;

          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }

            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }

            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }

            if (t && _.label < t[2]) {
              _.label = t[2];

              _.ops.push(op);

              break;
            }

            if (t[2]) {
              _.ops.pop();
            }

            _.trys.pop();

            continue;
        }

        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }

    if (op[0] & 5) {
      throw op[1];
    }

    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
} // import * as PouchDB from 'pouchdb-core';


var maxUpsertCounter = 50;
var UpsertCounter = 0; // this is essentially the "update sugar" function from daleharvey/pouchdb#1388
// the diffFun tells us what delta to apply to the doc.  it either returns
// the doc, or false if it doesn't need to do an update after all

function upsertInner(db, docId, diffFun) {
  return __awaiter(this, void 0, void 0, function () {
    var previouslyDeleted, maxRetries, text, err, text, err, doc, getError_1, docRev, newDoc, res, err_1;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          _a.trys.push([0, 6,, 7]);

          previouslyDeleted = false;
          UpsertCounter++;

          if (UpsertCounter > maxUpsertCounter) {
            maxRetries = maxUpsertCounter;
            text = "Maximum upsert retries of " + maxRetries + " exceeded";
            err = new Error(text);
            UpsertCounter = 0;
            throw err;
          }

          if (typeof docId !== 'string') {
            text = "doc id string is required";
            err = new Error(text);
            UpsertCounter = 0;
            throw err;
          }

          doc = void 0;
          _a.label = 1;

        case 1:
          _a.trys.push([1, 3,, 4]);

          return [4
          /*yield*/
          , db.get(docId)];

        case 2:
          doc = _a.sent();
          return [3
          /*break*/
          , 4];

        case 3:
          getError_1 = _a.sent();

          if (getError_1.status !== 404) {
            throw getError_1;
          } else if (getError_1.reason && getError_1.reason === "deleted") {
            previouslyDeleted = true;
            doc = [];
          } else {
            doc = {};
          }

          return [3
          /*break*/
          , 4];

        case 4:
          docRev = doc && doc._rev ? doc._rev : "";
          newDoc = diffFun(doc);

          if (!newDoc) {
            // if the diffFun returns falsy, we short-circuit as
            // an optimization
            UpsertCounter = 0;
            return [2
            /*return*/
            , {
              updated: false,
              rev: docRev,
              id: docId
            }];
          }

          if (previouslyDeleted && newDoc._deleted) {
            return [2
            /*return*/
            , {
              updated: false,
              rev: "",
              id: docId,
              deleted: true,
              message: "cannot re-delete an existing deleted document"
            }];
          } // users aren't allowed to modify these values, so
          // reset them to whatever currently exists in the database


          newDoc._id = docId;

          if (docRev) {
            newDoc._rev = docRev;
          } else {
            delete newDoc._rev;
          }

          return [4
          /*yield*/
          , tryAndPut(db, newDoc, diffFun)];

        case 5:
          res = _a.sent();
          UpsertCounter = 0;
          return [2
          /*return*/
          , res];

        case 6:
          err_1 = _a.sent();
          throw err_1;

        case 7:
          return [2
          /*return*/
          ];
      }
    });
  });
}

function tryAndPut(db, doc, diffFun) {
  return __awaiter(this, void 0, void 0, function () {
    var putResponse, res, err_2, PouchError, res, UpsertError_1;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          _a.trys.push([0, 2,, 7]);

          return [4
          /*yield*/
          , db.put(doc)];

        case 1:
          putResponse = _a.sent();
          res = {
            updated: true,
            rev: putResponse.rev,
            id: doc._id
          };
          return [2
          /*return*/
          , res];

        case 2:
          err_2 = _a.sent();
          PouchError = err_2;

          if (!(PouchError.status !== 409)) {
            return [3
            /*break*/
            , 3];
          }

          throw PouchError;

        case 3:
          _a.trys.push([3, 5,, 6]);

          return [4
          /*yield*/
          , upsertInner(db, doc._id, diffFun)];

        case 4:
          res = _a.sent();
          return [2
          /*return*/
          , res];

        case 5:
          UpsertError_1 = _a.sent();
          throw UpsertError_1;

        case 6:
          return [3
          /*break*/
          , 7];

        case 7:
          return [2
          /*return*/
          ];
      }
    });
  });
} // declare namespace PouchDB {
//   interface Database<Content extends {} = {}> {
//     upsert
//   }
// }
// declare module PouchDB {
//   interface Database<Content extends {} = {}> {
//     upsert
//   }
// }
// let PouchDBWithUpsert:any = {};
// exports.upsert = function(docId:PouchDB.Core.DocumentId, diffFun:UpsertDiffCallback<PouchDoc>, cb?:Function):Promise<UpsertResponse> {


var upsert = function upsert(docId, diffFun) {
  return __awaiter(this, void 0, void 0, function () {
    var self_1, db, res, err_3;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          _a.trys.push([0, 2,, 3]);

          self_1 = this;
          db = self_1;
          return [4
          /*yield*/
          , upsertInner(db, docId, diffFun)];

        case 1:
          res = _a.sent();
          return [2
          /*return*/
          , res];

        case 2:
          err_3 = _a.sent();
          throw err_3;

        case 3:
          return [2
          /*return*/
          ];
      }
    });
  });
}; // PouchDBWithUpsert.putIfNotExists = async function(docId:PouchDB.Core.DocumentId, doc:PouchDoc):Promise<UpsertResponse> {
// exports.putIfNotExists = async function(doc:PouchDoc):Promise<UpsertResponse> {
// exports.putIfNotExists = function(docId:PouchDB.Core.DocumentId, doc:PouchDoc, cb?:Function):Promise<UpsertResponse> {


var putIfNotExists = function putIfNotExists(docId, doc) {
  return __awaiter(this, void 0, void 0, function () {
    var self_2, db, diffFun, res, err_4;
    return __generator(this, function (_a) {
      switch (_a.label) {
        case 0:
          _a.trys.push([0, 2,, 3]);

          self_2 = this;
          db = self_2;

          if (typeof docId !== 'string') {
            doc = docId;
            docId = doc._id;
          }

          diffFun = function diffFun(existingDoc) {
            if (existingDoc._rev) {
              return false; // do nothing
            } // return putDoc;


            return doc;
          };

          return [4
          /*yield*/
          , upsertInner(db, docId, diffFun)];

        case 1:
          res = _a.sent();
          return [2
          /*return*/
          , res];

        case 2:
          err_4 = _a.sent();
          throw err_4;

        case 3:
          return [2
          /*return*/
          ];
      }
    });
  });
};

exports.upsert = upsert;
exports.putIfNotExists = putIfNotExists;

},{}]},{},[1])(1)
});
